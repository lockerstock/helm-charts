# Default values for microservice.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

replicaCount: 1

environment: local

image:
  repository: nginx
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  tag: ""

imagePullSecrets: 
  - name: image-pull-secret

service:
  annotations: {}
  type: ClusterIP
  port: 80
  portName: http

ingressRoute:
  enabled: false
  hostname: '$HOSTNAME'
  annotations: {}
  middlewares:
    - name: response-headers
  base:
    paths: []
    pathPrefixes: []
  admin:
    paths: []
    pathPrefixes: []

resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  targetMemoryUtilizationPercentage: 80

deployment:
  container:
    args: []

  database:
    mongo:
      # Enabling MongoDB below will spin up extra resources to facilitate standard connection to a MongoDB Atlas instance.
      # This includes an ExternalSecret to retrieve the MongoDB connection string and environment variables for the deployment to allow the application to connect to it.
      enabled: false

  opentelemetry:
    # Enabling OpenTelemetry below will provide the internal URL environment variable to the deployment for the application to send traces to.
    enabled: false

  config:
    # Log level (trace, debug, info, warn, error)
    LOG_LEVEL: 'info'

    # Log format (plain, json)
    LOG_FORMAT: 'plain'

    # Go env (development, production)
    GO_ENV: production

    # Gin env (debug, test, release)
    GIN_MODE: release

  # Custom env objects will be inserted into the deployment verbatim and should be provided in standard Kubernetes format
  # https://kubernetes.io/docs/tasks/inject-data-application/define-environment-variable-container
  env: []

  probes:
    liveness:
      httpGet:
        path: /rest/liveness
        port: http
    readiness: 
      httpGet:
        path: /rest/readiness
        port: http