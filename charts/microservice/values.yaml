# Default values for microservice.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

replicaCount: 1

environment: local

image:
  repository: nginx
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  tag: "latest"

imagePullSecrets: 
  - name: image-pull-secret

service:
  annotations: {}
  type: ClusterIP
  port: 80
  portName: http

ingressRoute:
  enabled: false
  # Recommended value for `hostname` is the environment variable template variable of $HOSTNAME so it can be resolved and replaced during deployment.
  hostname: ''
  annotations: {}
  middlewares:
    - name: response-headers

  # `rules` represents an array of objects that will be built into Traefik IngressRoute rules. More information [here](https://doc.traefik.io/traefik/routing/routers/#rule).
  # Each index in the array will be used to create a unique ANDed ruleset where all key/value pairs represent a portion of a single rule.
  # The entirety of the array represent a series of rules that or ORed together.
  # The entire array is then ANDed against the given hostname above.
  # It is recommended to be as precise as possible with rules so the matching algorithm is reliable.
  rules: []
    # - Headers: {} # Map of key value pairs to match Headers on
    #   HeadersRegexp: {} # Map of key value pairs to regex match Headers on
    #   Methods: [] # Array of HTTP methods
    #   Paths: [] # Array of full paths to match on
    #   PathPrefixes: [] # Array of "Regexp Syntax" paths to match on
    #   Queries: {} # Map of key value pairs to match Query parameters on
    #   ClientIPs: [] # Map of ClientIPs to match on

resources:
  requests:
    cpu: 100m
    memory: 50Mi
  limits:
    cpu: 150m
    memory: 100Mi

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  targetMemoryUtilizationPercentage: 80

deployment:
  container:
    args: []

  database:
    # Any MongoDB configuration assumes that the microservice has implemented and applied 
    # the [database_user](https://app.terraform.io/app/lockerstock/registry/modules/private/lockerstock/database_user/mongodb) terraform module.
    mongo:
      # Enabling MongoDB below will spin up extra resources to facilitate standard connection to a MongoDB Atlas instance.
      # This includes an ExternalSecret to retrieve the MongoDB connection string and environment variables for the deployment to allow the application to connect to it.
      enabled: false

  # Any Auth0 configuration assumes that the microservice has implemented and applied the proper terraform resources to populate GCP Secret Manager with the required keys.
  # This section will likely only ever be relevant to session-api.
  # Example: https://github.com/lockerstock/session-api/blob/main/deployments/terraform/modules/auth0/gcp.secrets.tf
  auth0:
    # Enabling Auth0 below will spin up extra resources to facilitate standard connection to a Auth0 application instance.
    # This includes an ExternalSecret to retrieve the Auth0 secrets and environment variables for the deployment to allow the application to connect to it.
    enabled: false

  cache:
    # Enabling cache below will spin up an additional deployment and service for cache. The default cache will use a redis image but can be configured with a different Docker image.
    # Additionally, proper environment variables will be inserted into the main application's deployment specification with this enabled.
    enabled: false
    service:
      type: ClusterIP
      port: 6379
      portName: cache
    image:
      repository: redis
      pullPolicy: IfNotPresent
      # Overrides the image tag whose default is the chart appVersion.
      tag: '7-alpine'
    resources:
      requests:
        cpu: 100m
        memory: 500Mi
      limits: {}

  opentelemetry:
    # Enabling OpenTelemetry below will provide the internal URL environment variable to the deployment for the application to send traces to.
    enabled: false

  config:
    # Log level (trace, debug, info, warn, error)
    LOG_LEVEL: 'info'

    # Log format (plain, json)
    LOG_FORMAT: 'plain'

    # Go env (development, production)
    GO_ENV: production

    # Gin env (debug, test, release)
    GIN_MODE: release

  # Custom env objects will be inserted into the deployment verbatim and should be provided in standard Kubernetes format
  # https://kubernetes.io/docs/tasks/inject-data-application/define-environment-variable-container
  env: []

  # Array of objects that configures kubernetes generic secrets to be created.
  secrets: []
    #   # Name of secret, will be prepended with {{ .Release.Name }}-
    # - name: example 
    #   # Yaml format annotations to apply to secret
    #   annotations: {} 
    #   # Type of secret to create: https://kubernetes.io/docs/concepts/configuration/secret/#secret-types
    #   type: Opaque
    #   # Boolean flag determine whether or not replicate secret to feature namespaces, or create a new secret entirely
    #   replicate: true 
    #   # Array of objects to define stringData entries
    #   data: 
    #       # Key of datum in secret
    #     - key: thing-one
    #       # Plain-text value of secret.
    #       value: 'something'
    #       # Boolean flag to instead randomly generate alphanumeric string
    #       random: true
    #       # Length of randomly generated string
    #       length: 32
    #       # Name of environment variable to apply the secret key to in the deployment's configuration
    #       env: THING_TWO

  probes:
    # Each of the following will be applied verbatim as yaml to the deployment's probes.
    # Documentation available [here](https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes).
    liveness: {}
    readiness: {}
